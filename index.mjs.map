{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/crot.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport f32 from '@stdlib/number-float64-base-to-float32';\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex64';\nimport realf from '@stdlib/complex-float32-real';\nimport imagf from '@stdlib/complex-float32-imag';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideCX - `cx` stride length\n* @param {NonNegativeInteger} offsetCX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideCY - `cy` stride length\n* @param {NonNegativeInteger} offsetCY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex64} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex64( 0.3, 0.4 );\n*\n* crot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, s );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-1.1\n*\n* var im = imagf( z );\n* // returns ~-0.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction crot( N, cx, strideCX, offsetCX, cy, strideCY, offsetCY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sr;\n\tvar si;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar yr;\n\tvar yi;\n\tvar xr;\n\tvar xi;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\n\tix = offsetCX * 2;\n\tiy = offsetCY * 2;\n\n\tsx = strideCX * 2;\n\tsy = strideCY * 2;\n\n\tsr = realf( s );\n\tsi = imagf( s );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tyr = viewY[ iy ];\n\t\tyi = viewY[ iy+1 ];\n\t\txr = viewX[ ix ];\n\t\txi = viewX[ ix+1 ];\n\n\t\t// Compute tmp = c * cx[ ix ] + s * cy[ iy ]\n\t\tviewX[ ix ] = f32( f32( c*xr ) + f32( f32( sr*yr ) - f32( si*yi ) ) );\n\t\tviewX[ ix+1 ] = f32( f32( c*xi ) + f32( f32( sr*yi ) + f32( si*yr ) ) );\n\n\t\t// Compute cy[ iy ] = c * cy[ iy ] - conj(s) * cx[ ix ]\n\t\tviewY[ iy ] = f32( f32( c*yr ) - f32( f32( sr*xr ) + f32( si*xi ) ) );\n\t\tviewY[ iy+1 ] = f32( f32( c*yi ) - f32( f32( sr*xi ) - f32( si*xr ) ) );\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nexport default crot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideCX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideCY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex64} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex64( 0.3, 0.4 );\n*\n* crot( cx.length, cx, 1, cy, 1, 0.8, s );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-1.1\n*\n* var im = imagf( z );\n* // returns ~-0.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction crot( N, cx, strideCX, cy, strideCY, c, s ) {\n\tvar ix = stride2offset( N, strideCX );\n\tvar iy = stride2offset( N, strideCY );\n\treturn ndarray( N, cx, strideCX, ix, cy, strideCY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default crot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport crot from './crot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( crot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default crot;\n"],"names":["crot","N","cx","strideCX","offsetCX","cy","strideCY","offsetCY","c","s","viewX","viewY","sr","si","sx","sy","ix","iy","yr","yi","xr","xi","i","reinterpret","realf","imagf","f32","ndarray","stride2offset","setReadOnly"],"mappings":";;inBA0EA,SAASA,EAAMC,EAAGC,EAAIC,EAAUC,EAAUC,EAAIC,EAAUC,EAAUC,EAAGC,GACpE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKrB,GAAK,EACT,OAAOI,EAcR,IAZAK,EAAQa,EAAarB,EAAI,GACzBS,EAAQY,EAAalB,EAAI,GAEzBW,EAAgB,EAAXZ,EACLa,EAAgB,EAAXV,EAELO,EAAgB,EAAXX,EACLY,EAAgB,EAAXT,EAELM,EAAKY,EAAOf,GACZI,EAAKY,EAAOhB,GAENa,EAAI,EAAGA,EAAIrB,EAAGqB,IACnBJ,EAAKP,EAAOM,GACZE,EAAKR,EAAOM,EAAG,GACfG,EAAKV,EAAOM,GACZK,EAAKX,EAAOM,EAAG,GAGfN,EAAOM,GAAOU,EAAKA,EAAKlB,EAAEY,GAAOM,EAAKA,EAAKd,EAAGM,GAAOQ,EAAKb,EAAGM,KAC7DT,EAAOM,EAAG,GAAMU,EAAKA,EAAKlB,EAAEa,GAAOK,EAAKA,EAAKd,EAAGO,GAAOO,EAAKb,EAAGK,KAG/DP,EAAOM,GAAOS,EAAKA,EAAKlB,EAAEU,GAAOQ,EAAKA,EAAKd,EAAGQ,GAAOM,EAAKb,EAAGQ,KAC7DV,EAAOM,EAAG,GAAMS,EAAKA,EAAKlB,EAAEW,GAAOO,EAAKA,EAAKd,EAAGS,GAAOK,EAAKb,EAAGO,KAE/DJ,GAAMF,EACNG,GAAMF,EAEP,OAAOV,CACR,CCpDA,SAASL,EAAMC,EAAGC,EAAIC,EAAUE,EAAIC,EAAUE,EAAGC,GAGhD,OAAOkB,EAAS1B,EAAGC,EAAIC,EAFdyB,EAAe3B,EAAGE,GAEUE,EAAIC,EADhCsB,EAAe3B,EAAGK,GAC4BE,EAAGC,EAC3D,CC7CAoB,EAAA7B,EAAA,UAAA2B"}