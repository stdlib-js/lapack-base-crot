{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/crot.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar realf = require( '@stdlib/complex-float32-real' );\nvar imagf = require( '@stdlib/complex-float32-imag' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideCX - `cx` stride length\n* @param {NonNegativeInteger} offsetCX - starting `cx` index\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideCY - `cy` stride length\n* @param {NonNegativeInteger} offsetCY - starting `cy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex64} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex64( 0.3, 0.4 );\n*\n* crot( cx.length, cx, 1, 0, cy, 1, 0, 0.8, s );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-1.1\n*\n* var im = imagf( z );\n* // returns ~-0.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction crot( N, cx, strideCX, offsetCX, cy, strideCY, offsetCY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sr;\n\tvar si;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar yr;\n\tvar yi;\n\tvar xr;\n\tvar xi;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn cy;\n\t}\n\tviewX = reinterpret( cx, 0 );\n\tviewY = reinterpret( cy, 0 );\n\n\tix = offsetCX * 2;\n\tiy = offsetCY * 2;\n\n\tsx = strideCX * 2;\n\tsy = strideCY * 2;\n\n\tsr = realf( s );\n\tsi = imagf( s );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tyr = viewY[ iy ];\n\t\tyi = viewY[ iy+1 ];\n\t\txr = viewX[ ix ];\n\t\txi = viewX[ ix+1 ];\n\n\t\t// Compute tmp = c * cx[ ix ] + s * cy[ iy ]\n\t\tviewX[ ix ] = f32( f32( c*xr ) + f32( f32( sr*yr ) - f32( si*yi ) ) );\n\t\tviewX[ ix+1 ] = f32( f32( c*xi ) + f32( f32( sr*yi ) + f32( si*yr ) ) );\n\n\t\t// Compute cy[ iy ] = c * cy[ iy ] - conj(s) * cx[ ix ]\n\t\tviewY[ iy ] = f32( f32( c*yr ) - f32( f32( sr*xr ) + f32( si*xi ) ) );\n\t\tviewY[ iy+1 ] = f32( f32( c*yi ) - f32( f32( sr*xi ) - f32( si*xr ) ) );\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn cy;\n}\n\n\n// EXPORTS //\n\nmodule.exports = crot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideCX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideCY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex64} s - sine of the angle of rotation\n* @returns {Complex64Array} `cy`\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex64( 0.3, 0.4 );\n*\n* crot( cx.length, cx, 1, cy, 1, 0.8, s );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-1.1\n*\n* var im = imagf( z );\n* // returns ~-0.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\nfunction crot( N, cx, strideCX, cy, strideCY, c, s ) {\n\tvar ix = stride2offset( N, strideCX );\n\tvar iy = stride2offset( N, strideCY );\n\treturn ndarray( N, cx, strideCX, ix, cy, strideCY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = crot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar crot = require( './crot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( crot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = crot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK auxiliary routine to apply a plane rotation with real cosine and complex sine.\n*\n* @module @stdlib/lapack-base-crot\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var crot = require( '@stdlib/lapack-base-crot' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex64( 0.6, 0 );\n*\n* crot( cx.length, cx, 1, cy, 1, 0.8, s );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-0.6\n*\n* var im = imagf( z );\n* // returns ~-1.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var crot = require( '@stdlib/lapack-base-crot' );\n*\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var cy = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex64( 0.6, 0 );\n*\n* crot.ndarray( cx.length, cx, 1, 0, cy, 1, 0, 0.8, s );\n*\n* var z = cy.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns ~-0.6\n*\n* var im = imagf( z );\n* // returns ~-1.2\n*\n* z = cx.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( z );\n* // returns ~0.8\n*\n* im = imagf( z );\n* // returns ~1.6\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar crot;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tcrot = main;\n} else {\n\tcrot = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = crot;\n\n// exports: { \"ndarray\": \"crot.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,QAAS,wCAAyC,EACxDC,EAAc,QAAS,4CAA6C,EACpEC,EAAQ,QAAS,8BAA+B,EAChDC,EAAQ,QAAS,8BAA+B,EAiDpD,SAASC,EAAMC,EAAGC,EAAIC,EAAUC,EAAUC,EAAIC,EAAUC,EAAUC,EAAGC,EAAI,CACxE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKrB,GAAK,EACT,OAAOI,EAcR,IAZAK,EAAQb,EAAaK,EAAI,CAAE,EAC3BS,EAAQd,EAAaQ,EAAI,CAAE,EAE3BW,EAAKZ,EAAW,EAChBa,EAAKV,EAAW,EAEhBO,EAAKX,EAAW,EAChBY,EAAKT,EAAW,EAEhBM,EAAKd,EAAOW,CAAE,EACdI,EAAKd,EAAOU,CAAE,EAERa,EAAI,EAAGA,EAAIrB,EAAGqB,IACnBJ,EAAKP,EAAOM,CAAG,EACfE,EAAKR,EAAOM,EAAG,CAAE,EACjBG,EAAKV,EAAOM,CAAG,EACfK,EAAKX,EAAOM,EAAG,CAAE,EAGjBN,EAAOM,CAAG,EAAIpB,EAAKA,EAAKY,EAAEY,CAAG,EAAIxB,EAAKA,EAAKgB,EAAGM,CAAG,EAAItB,EAAKiB,EAAGM,CAAG,CAAE,CAAE,EACpET,EAAOM,EAAG,CAAE,EAAIpB,EAAKA,EAAKY,EAAEa,CAAG,EAAIzB,EAAKA,EAAKgB,EAAGO,CAAG,EAAIvB,EAAKiB,EAAGK,CAAG,CAAE,CAAE,EAGtEP,EAAOM,CAAG,EAAIrB,EAAKA,EAAKY,EAAEU,CAAG,EAAItB,EAAKA,EAAKgB,EAAGQ,CAAG,EAAIxB,EAAKiB,EAAGQ,CAAG,CAAE,CAAE,EACpEV,EAAOM,EAAG,CAAE,EAAIrB,EAAKA,EAAKY,EAAEW,CAAG,EAAIvB,EAAKA,EAAKgB,EAAGS,CAAG,EAAIzB,EAAKiB,EAAGO,CAAG,CAAE,CAAE,EAEtEJ,GAAMF,EACNG,GAAMF,EAEP,OAAOV,CACR,CAKAV,EAAO,QAAUK,IC/HjB,IAAAuB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA+Cd,SAASC,EAAMC,EAAGC,EAAIC,EAAUC,EAAIC,EAAUC,EAAGC,EAAI,CACpD,IAAIC,EAAKV,EAAeG,EAAGE,CAAS,EAChCM,EAAKX,EAAeG,EAAGI,CAAS,EACpC,OAAON,EAASE,EAAGC,EAAIC,EAAUK,EAAIJ,EAAIC,EAAUI,EAAIH,EAAGC,CAAE,CAC7D,CAKAV,EAAO,QAAUG,IC/EjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtCH,EAAO,QAAUE,ICuDjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAOD,EAEPC,EAAOC,EAMR,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "f32", "reinterpret", "realf", "imagf", "crot", "N", "cx", "strideCX", "offsetCX", "cy", "strideCY", "offsetCY", "c", "s", "viewX", "viewY", "sr", "si", "sx", "sy", "ix", "iy", "yr", "yi", "xr", "xi", "i", "require_crot", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "crot", "N", "cx", "strideCX", "cy", "strideCY", "c", "s", "ix", "iy", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "crot", "ndarray", "join", "tryRequire", "isError", "main", "crot", "tmp"]
}
